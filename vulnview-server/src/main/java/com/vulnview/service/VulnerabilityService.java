package com.vulnview.service;

import com.vulnview.dto.vulnerability.ComponentReportDto;
import com.vulnview.dto.vulnerability.VulnerabilityResponse;
import com.vulnview.dto.vulnerability.VulnerabilityDataDto;
import com.vulnview.entity.Component;
import com.vulnview.entity.Project;
import com.vulnview.entity.Vulnerability;
import com.vulnview.entity.RiskLevel;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;

import java.util.List;
import java.util.Set;
import java.util.Map;

public interface VulnerabilityService {
    VulnerabilityResponse createVulnerability(Vulnerability vulnerability);
    VulnerabilityResponse updateVulnerability(Long id, Vulnerability vulnerability);
    void deleteVulnerability(Long id);
    VulnerabilityResponse getVulnerabilityById(Long id);
    Vulnerability getVulnerabilityByCveId(String cveId);
    Page<Vulnerability> getAllVulnerabilities(Pageable pageable);
    List<Vulnerability> getVulnerabilitiesByRiskLevel(RiskLevel riskLevel);
    List<VulnerabilityResponse> getVulnerabilitiesByRiskLevel(String riskLevel);
    List<ComponentReportDto> getVulnerabilityByComponentPurl(List<String> purls);
    void saveVulnerabilityReport(List<ComponentReportDto> componentReports);
    List<VulnerabilityResponse> getAllVulnerabilitiesResponse();
    VulnerabilityResponse getVulnerabilityByIdResponse(String id);
    void addComponentToVulnerability(Long vulnerabilityId, Long componentId, Long sbomId);
    void removeComponentFromVulnerability(Long vulnerabilityId, Long componentId);

    // New methods for vulnerability comparison
    List<VulnerabilityResponse> compareVulnerabilities(List<String> cveIds);
    List<VulnerabilityResponse> getVulnerabilitiesByComponentAndRiskLevel(String componentPurl, RiskLevel riskLevel);
    List<VulnerabilityResponse> getVulnerabilitiesByProjectAndRiskLevel(Long projectId, RiskLevel riskLevel);
    Map<RiskLevel, Integer> getVulnerabilitySummaryByProject(Long projectId);

    /**
     * Find or create a global vulnerability record
     * @param vulnerabilityData The vulnerability data from external API
     * @param source The source of the vulnerability data (e.g., "NVD", "OSV")
     * @return The found or created vulnerability
     */
    Vulnerability findOrCreateGlobalVulnerability(VulnerabilityDataDto vulnerabilityData, String source);

    /**
     * Link a component to a vulnerability
     * @param componentId The ID of the component
     * @param vulnerabilityId The ID of the vulnerability
     * @param details Additional details about the link
     */
    void linkComponentToVulnerability(Long componentId, Long vulnerabilityId, String details);

    Set<Component> getComponents();

    List<VulnerabilityResponse> getVulnerabilitiesWithRiskLevelNotNone();
} 