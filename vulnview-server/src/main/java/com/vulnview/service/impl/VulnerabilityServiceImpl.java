package com.vulnview.service.impl;

import com.vulnview.entity.Vulnerability;
import com.vulnview.entity.RiskLevel;
import com.vulnview.exception.NotFoundException;
import com.vulnview.repository.VulnerabilityRepository;
import com.vulnview.service.VulnerabilityService;
import lombok.RequiredArgsConstructor;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import java.util.List;
import java.util.Optional;

@Service
@RequiredArgsConstructor
public class VulnerabilityServiceImpl implements VulnerabilityService {
    private final VulnerabilityRepository vulnerabilityRepository;

    @Override
    @Transactional
    public Vulnerability createVulnerability(Vulnerability vulnerability) {
        return vulnerabilityRepository.save(vulnerability);
    }

    @Override
    @Transactional
    public Vulnerability updateVulnerability(Long id, Vulnerability vulnerability) {
        Vulnerability existingVulnerability = vulnerabilityRepository.findById(id)
                .orElseThrow(() -> new NotFoundException("Vulnerability not found with id: " + id));
        
        existingVulnerability.setCveId(vulnerability.getCveId());
        existingVulnerability.setDescription(vulnerability.getDescription());
        existingVulnerability.setRemediation(vulnerability.getRemediation());
        existingVulnerability.setRiskLevel(vulnerability.getRiskLevel());
        existingVulnerability.setPublishedDate(vulnerability.getPublishedDate());
        existingVulnerability.setLastModifiedDate(vulnerability.getLastModifiedDate());
        
        return vulnerabilityRepository.save(existingVulnerability);
    }

    @Override
    @Transactional
    public void deleteVulnerability(Long id) {
        if (!vulnerabilityRepository.existsById(id)) {
            throw new NotFoundException("Vulnerability not found with id: " + id);
        }
        vulnerabilityRepository.deleteById(id);
    }

    @Override
    @Transactional(readOnly = true)
    public Vulnerability getVulnerabilityById(Long id) {
        return vulnerabilityRepository.findById(id)
                .orElseThrow(() -> new NotFoundException("Vulnerability not found with id: " + id));
    }

    @Override
    @Transactional(readOnly = true)
    public Vulnerability getVulnerabilityByCveId(String cveId) {
        Optional<Vulnerability> vulnerability = vulnerabilityRepository.findByIdentifier(cveId);
        if (vulnerability.isEmpty()) {
            throw new NotFoundException("Vulnerability not found with CVE ID: " + cveId);
        }
        return vulnerability.get();
    }

    @Override
    @Transactional(readOnly = true)
    public Page<Vulnerability> getAllVulnerabilities(Pageable pageable) {
        return vulnerabilityRepository.findAll(pageable);
    }

    @Override
    @Transactional(readOnly = true)
    public List<Vulnerability> getVulnerabilitiesByRiskLevel(RiskLevel riskLevel) {
        return vulnerabilityRepository.findByRiskLevel(riskLevel);
    }
} 