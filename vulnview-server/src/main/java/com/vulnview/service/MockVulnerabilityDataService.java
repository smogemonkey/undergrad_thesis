package com.vulnview.service;

import com.vulnview.entity.Vulnerability;
import com.vulnview.entity.Component;
import com.vulnview.enums.RiskLevel;
import org.springframework.stereotype.Service;

import java.time.LocalDateTime;
import java.util.*;

@Service
public class MockVulnerabilityDataService {
    
    private static final List<String> CVE_PREFIXES = Arrays.asList(
        "CVE-2023", "CVE-2022", "CVE-2021"
    );
    
    private static final List<String> VULNERABILITY_TYPES = Arrays.asList(
        "SQL Injection", "Cross-Site Scripting", "Remote Code Execution",
        "Buffer Overflow", "Authentication Bypass", "Information Disclosure"
    );

    public List<Vulnerability> generateMockVulnerabilities(Component component) {
        List<Vulnerability> vulnerabilities = new ArrayList<>();
        Random random = new Random();
        
        // Generate 0-3 vulnerabilities per component
        int numVulnerabilities = random.nextInt(4);
        
        for (int i = 0; i < numVulnerabilities; i++) {
            Vulnerability vuln = Vulnerability.builder()
                .cveId(generateCVEId())
                .title(generateVulnerabilityTitle())
                .description(generateVulnerabilityDescription())
                .severity(generateSeverity())
                .cvssScore(generateCVSSScore())
                .cvssVector(generateCVSSVector())
                .build();
            vulnerabilities.add(vuln);
        }
        
        return vulnerabilities;
    }

    private String generateCVEId() {
        Random random = new Random();
        String prefix = CVE_PREFIXES.get(random.nextInt(CVE_PREFIXES.size()));
        return String.format("%s-%04d", prefix, random.nextInt(10000));
    }

    private String generateVulnerabilityTitle() {
        Random random = new Random();
        String type = VULNERABILITY_TYPES.get(random.nextInt(VULNERABILITY_TYPES.size()));
        return String.format("%s Vulnerability in %s", type, generateComponentName());
    }

    private String generateVulnerabilityDescription() {
        return "This is a mock vulnerability description for testing purposes. " +
               "It simulates a real vulnerability that could be found in a component.";
    }

    private String generateSeverity() {
        Random random = new Random();
        RiskLevel[] levels = RiskLevel.values();
        return levels[random.nextInt(levels.length)].name();
    }

    private double generateCVSSScore() {
        Random random = new Random();
        return Math.round(random.nextDouble() * 10.0 * 10.0) / 10.0;
    }

    private String generateCVSSVector() {
        return "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:H";
    }

    private String generateComponentName() {
        String[] components = {"Spring Framework", "Apache Tomcat", "MySQL", "PostgreSQL", 
                             "Node.js", "React", "Angular", "Vue.js", "Docker", "Kubernetes"};
        Random random = new Random();
        return components[random.nextInt(components.length)];
    }
} 