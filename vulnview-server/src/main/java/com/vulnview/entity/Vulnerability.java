package com.vulnview.entity;

import jakarta.persistence.*;
import lombok.*;
import org.hibernate.annotations.CreationTimestamp;
import org.hibernate.annotations.UpdateTimestamp;

import java.time.LocalDateTime;
import java.util.HashSet;
import java.util.Set;

@Data
@Entity
@Table(name = "vulnerabilities")
@NoArgsConstructor
@AllArgsConstructor
@Builder
public class Vulnerability {
    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Long id;

    @Column(nullable = false, unique = true)
    private String cveId;

    @Column(name = "title", length = 1000)
    private String title;

    @Column(name = "description", columnDefinition = "TEXT")
    private String description;

    @Column(name = "cwe", length = 50)
    private String cwe;

    @Column(name = "reference", length = 1000)
    private String reference;

    @Column(nullable = false)
    private double cvssScore;

    @Column(name = "cvss_vector")
    private String cvssVector;

    @Column(name = "published_date")
    private LocalDateTime publishedDate;

    @Column(name = "last_modified_date")
    private LocalDateTime lastModifiedDate;

    @OneToMany(mappedBy = "vulnerability", cascade = CascadeType.ALL, orphanRemoval = true)
    @ToString.Exclude
    @EqualsAndHashCode.Exclude
    @com.fasterxml.jackson.annotation.JsonIgnore
    @Builder.Default
    private Set<ComponentVulnerability> componentVulnerabilities = new HashSet<>();

    @CreationTimestamp
    @Column(name = "created_at", updatable = false)
    private LocalDateTime createdAt;

    @UpdateTimestamp
    @Column(name = "updated_at")
    private LocalDateTime updatedAt;

    @Column(length = 500)
    private String remediation;

    @ManyToOne(fetch = FetchType.LAZY)
    @JoinColumn(name = "project_id")
    @ToString.Exclude
    @EqualsAndHashCode.Exclude
    @com.fasterxml.jackson.annotation.JsonIgnore
    private Project project;

    @ElementCollection
    @CollectionTable(name = "vulnerability_affected_components", joinColumns = @JoinColumn(name = "vulnerability_id"))
    @Column(name = "component_name")
    @Builder.Default
    private Set<String> affectedComponents = new HashSet<>();

    @Column(columnDefinition = "TEXT")
    private String recommendation;

    @Column(name = "source_name")
    private String source;

    @Column(name = "score_value")
    private Double score;

    @Column(nullable = false)
    private String severity;

    @Enumerated(EnumType.STRING)
    @Column(name = "risk_level", nullable = false)
    private RiskLevel riskLevel;

    @ManyToOne(fetch = FetchType.LAZY)
    @JoinColumn(name = "analysis_id")
    @ToString.Exclude
    @EqualsAndHashCode.Exclude
    @com.fasterxml.jackson.annotation.JsonIgnore
    private Analysis analysis;

    @Column(name = "epss_score")
    private Double epssScore;

    @Column(name = "cisa_kev_date")
    private LocalDateTime cisaKevDate;

    @Column(name = "in_cisa_kev")
    private boolean inCisaKev;

    @ManyToMany
    @JoinTable(
        name = "component_vulnerability",
        joinColumns = @JoinColumn(name = "vulnerability_id"),
        inverseJoinColumns = @JoinColumn(name = "component_id")
    )
    private Set<Component> components;

    @Column(name = "fix_version")
    private String fixVersion;

    @PrePersist
    protected void onCreate() {
        createdAt = LocalDateTime.now();
        updatedAt = LocalDateTime.now();
    }

    @PreUpdate
    protected void onUpdate() {
        updatedAt = LocalDateTime.now();
    }

    public void addComponent(Component component, Sbom sbom) {
        ComponentVulnerability cv = ComponentVulnerability.builder()
            .component(component)
            .vulnerability(this)
            .sbom(sbom)
            .severity(this.severity)
            .score(this.cvssScore)
            .cvssScore(this.cvssScore)
            .cve(this.cveId)
            .description(this.description)
            .cvssVector(this.cvssVector)
            .build();
        componentVulnerabilities.add(cv);
        component.getComponentVulnerabilities().add(cv);
    }

    public void removeComponent(Component component) {
        componentVulnerabilities.removeIf(cv -> cv.getComponent().equals(component));
    }
}