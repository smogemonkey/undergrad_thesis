package com.vulnview.repository;

import com.vulnview.entity.Project;
import com.vulnview.entity.Vulnerability;
import com.vulnview.entity.RiskLevel;
import org.springframework.data.jpa.repository.JpaRepository;
import org.springframework.data.jpa.repository.Query;
import org.springframework.data.repository.query.Param;
import org.springframework.stereotype.Repository;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import java.util.List;
import java.util.Map;
import java.util.Optional;

@Repository
public interface VulnerabilityRepository extends JpaRepository<Vulnerability, Long> {
    Logger logger = LoggerFactory.getLogger(VulnerabilityRepository.class);

    @Query("SELECT v FROM Vulnerability v WHERE v.cveId = :cveId AND v.project = :project ORDER BY v.id DESC")
    List<Vulnerability> findByCveIdAndProject(@Param("cveId") String cveId, @Param("project") Project project);

    Optional<Vulnerability> findByCveId(String cveId);

    default Optional<Vulnerability> findLatestByCveIdAndProject(String cveId, Project project) {
        logger.info("Finding latest vulnerability for CVE ID: {} in project: {}", cveId, project.getName());
        List<Vulnerability> vulnerabilities = findByCveIdAndProject(cveId, project);
        logger.info("Found {} vulnerabilities for CVE ID: {} in project: {}", 
            vulnerabilities.size(), cveId, project.getName());
        if (vulnerabilities.size() > 1) {
            logger.warn("Multiple vulnerabilities found for CVE ID: {} in project: {}. IDs: {}", 
                cveId, project.getName(), 
                vulnerabilities.stream().map(Vulnerability::getId).toList());
        }
        return vulnerabilities.isEmpty() ? Optional.empty() : Optional.of(vulnerabilities.get(0));
    }

    @Query("SELECT v FROM Vulnerability v WHERE v.riskLevel = :riskLevel")
    List<Vulnerability> findByRiskLevel(@Param("riskLevel") RiskLevel riskLevel);

    @Query("SELECT v FROM Vulnerability v WHERE v.inCisaKev = true AND v.riskLevel = :riskLevel")
    List<Vulnerability> findCisaKevByRiskLevel(@Param("riskLevel") RiskLevel riskLevel);

    @Query("SELECT v FROM Vulnerability v WHERE v.project.id = :projectId AND v.riskLevel = :riskLevel")
    List<Vulnerability> findByProjectIdAndRiskLevel(@Param("projectId") Long projectId, @Param("riskLevel") RiskLevel riskLevel);

    @Query("SELECT v FROM Vulnerability v WHERE v.project.id = :projectId")
    List<Vulnerability> findByProjectId(@Param("projectId") Long projectId);

    @Query("SELECT v FROM Vulnerability v WHERE v.cveId = :vulnerabilityDbId")
    Optional<Vulnerability> findByVulnerabilityDbId(@Param("vulnerabilityDbId") String vulnerabilityDbId);

    long countBySeverity(String severity);

    List<Vulnerability> findByProject(Project project);
    @Query("SELECT v FROM Vulnerability v WHERE v.project = :project AND v.analysis.build.buildNumber = :version")
    List<Vulnerability> findByProjectAndVersion(@Param("project") Project project, @Param("version") String version);
    @Query("SELECT new map(v.id as id, v.cveId as cveId, v.title as title, v.severity as severity, " +
           "v.riskLevel as riskLevel, v.createdAt as createdAt, v.updatedAt as updatedAt, " +
           "v.analysis.build.buildNumber as buildNumber) " +
           "FROM Vulnerability v WHERE v.project = :project ORDER BY v.createdAt DESC")
    List<Map<String, Object>> findVulnerabilityHistoryByProject(@Param("project") Project project);

    long countByProject(Project project);

    @Query("SELECT v FROM Vulnerability v WHERE v.riskLevel <> com.vulnview.entity.RiskLevel.NONE")
    List<Vulnerability> findByRiskLevelNotNone();
} 