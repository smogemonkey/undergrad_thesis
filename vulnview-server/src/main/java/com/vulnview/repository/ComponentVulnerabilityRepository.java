package com.vulnview.repository;

import com.vulnview.entity.Component;
import com.vulnview.entity.Vulnerability;
import com.vulnview.entity.ComponentVulnerability;
import com.vulnview.entity.Sbom;
import org.springframework.data.jpa.repository.JpaRepository;
import org.springframework.data.jpa.repository.Modifying;
import org.springframework.data.jpa.repository.Query;
import org.springframework.data.repository.query.Param;
import org.springframework.stereotype.Repository;

import java.util.List;
import java.util.Optional;

@Repository
public interface ComponentVulnerabilityRepository extends JpaRepository<ComponentVulnerability, Long> {
    @Modifying
    @Query("DELETE FROM ComponentVulnerability cv WHERE cv.component.id = :componentId")
    void deleteByComponentId(Long componentId);

    @Query("SELECT cv FROM ComponentVulnerability cv WHERE cv.component.id = :componentId AND cv.vulnerability.id = :vulnerabilityId")
    ComponentVulnerability findByComponentIdAndVulnerabilityId(Long componentId, Long vulnerabilityId);

    boolean existsByComponentAndVulnerability(Component component, Vulnerability vulnerability);

    boolean existsByComponentAndVulnerabilityAndSbom(Component component, Vulnerability vulnerability, Sbom sbom);

    List<ComponentVulnerability> findByComponentAndSbom(Component component, Sbom sbom);

    Optional<ComponentVulnerability> findByComponentAndVulnerability(Component component, Vulnerability vulnerability);

    @Query("SELECT CASE WHEN COUNT(cv) > 0 THEN true ELSE false END FROM ComponentVulnerability cv WHERE cv.component.id = :componentId AND cv.id = :vulnerabilityId")
    boolean existsByComponentIdAndVulnerabilityId(@Param("componentId") Long componentId, @Param("vulnerabilityId") Long vulnerabilityId);

    @Query("SELECT DISTINCT cv FROM ComponentVulnerability cv " +
           "LEFT JOIN FETCH cv.vulnerability v " +
           "LEFT JOIN FETCH cv.component c " +
           "LEFT JOIN FETCH cv.sbom s " +
           "WHERE cv.component.id IN :componentIds")
    List<ComponentVulnerability> findByComponentIdIn(@Param("componentIds") List<Long> componentIds);

    @Query("SELECT cv FROM ComponentVulnerability cv WHERE cv.sbom.id = :sbomId")
    List<ComponentVulnerability> findBySbomId(@Param("sbomId") Long sbomId);

    @Query("SELECT COUNT(cv) FROM ComponentVulnerability cv WHERE cv.sbom.id = :sbomId")
    int countBySbomId(@Param("sbomId") Long sbomId);

    @Modifying
    @Query("DELETE FROM ComponentVulnerability cv WHERE cv.component.sbom.id = :sbomId")
    void deleteByComponentSbomId(Long sbomId);

    @Modifying
    @Query("DELETE FROM ComponentVulnerability cv WHERE cv.component.repository.id = :repositoryId")
    void deleteByComponentRepositoryId(Long repositoryId);

    @Query("SELECT cv FROM ComponentVulnerability cv LEFT JOIN FETCH cv.vulnerability LEFT JOIN FETCH cv.component WHERE cv.component.id = :componentId")
    List<ComponentVulnerability> findByComponentId(@Param("componentId") Long componentId);

    @Modifying
    @Query("DELETE FROM ComponentVulnerability cv WHERE cv.sbom.id = :sbomId")
    void deleteBySbomId(@Param("sbomId") Long sbomId);
} 