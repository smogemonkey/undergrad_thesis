package com.vulnview.controller;

import com.vulnview.dto.vulnerability.ComponentReportDto;
import com.vulnview.dto.vulnerability.VulnerabilityResponse;
import com.vulnview.service.VulnerabilityScanService;
import com.vulnview.service.VulnerabilityService;
import com.vulnview.service.AuthenticationService;
import com.vulnview.entity.RiskLevel;
import lombok.extern.slf4j.Slf4j;
import org.springframework.http.ResponseEntity;
import org.springframework.security.access.prepost.PreAuthorize;
import org.springframework.web.bind.annotation.*;

import java.util.List;
import java.util.Map;

@Slf4j
@RestController
@RequestMapping("/api/v1/vulnerabilities")
public class VulnerabilityController extends BaseController {
    private final VulnerabilityService vulnerabilityService;
    private final VulnerabilityScanService vulnerabilityScanService;
    private final AuthenticationService authenticationService;

    public VulnerabilityController(
            VulnerabilityService vulnerabilityService,
            VulnerabilityScanService vulnerabilityScanService,
            AuthenticationService authenticationService) {
        super(authenticationService);
        this.vulnerabilityService = vulnerabilityService;
        this.vulnerabilityScanService = vulnerabilityScanService;
        this.authenticationService = authenticationService;
    }

    @GetMapping
    @PreAuthorize("hasAnyRole('USER', 'ADMIN')")
    public ResponseEntity<List<VulnerabilityResponse>> getAllVulnerabilities() {
        log.info("Retrieving all vulnerabilities");
        return ResponseEntity.ok(vulnerabilityService.getAllVulnerabilitiesResponse());
    }

    @GetMapping("/{id}")
    @PreAuthorize("hasAnyRole('USER', 'ADMIN')")
    public ResponseEntity<VulnerabilityResponse> getVulnerabilityById(@PathVariable String id) {
        log.info("Retrieving vulnerability with ID: {}", id);
        return ResponseEntity.ok(vulnerabilityService.getVulnerabilityByIdResponse(id));
    }

    @PostMapping("/scan")
    @PreAuthorize("hasAnyRole('ADMIN')")
    public ResponseEntity<?> triggerVulnerabilityScan() {
        log.info("Triggering vulnerability scan for all components (async)");
        String scanId = vulnerabilityScanService.startScan();
        return ResponseEntity.ok(java.util.Map.of("scanId", scanId));
    }

    @GetMapping("/scan/status/{scanId}")
    @PreAuthorize("hasAnyRole('USER', 'ADMIN')")
    public ResponseEntity<?> getScanStatus(@PathVariable String scanId) {
        var progress = vulnerabilityScanService.getProgress(scanId);
        if (progress == null) {
            return ResponseEntity.notFound().build();
        }
        return ResponseEntity.ok(progress);
    }

    @GetMapping("/scan/{scanId}")
    @PreAuthorize("hasAnyRole('USER', 'ADMIN')")
    public ResponseEntity<?> getScanResults(@PathVariable String scanId) {
        log.info("Getting scan results for scan ID: {}", scanId);
        var results = vulnerabilityScanService.getScanResults(scanId);
        if (results == null) {
            log.warn("No scan results found for scan ID: {}", scanId);
            return ResponseEntity.notFound().build();
        }
        log.info("Found scan results for scan ID: {}", scanId);
        return ResponseEntity.ok(results);
    }

    @GetMapping("/component/{purl}")
    @PreAuthorize("hasAnyRole('USER', 'ADMIN')")
    public ResponseEntity<List<ComponentReportDto>> getVulnerabilitiesByComponentPurl(@PathVariable String purl) {
        log.info("Retrieving vulnerabilities for component with PURL: {}", purl);
        return ResponseEntity.ok(vulnerabilityService.getVulnerabilityByComponentPurl(List.of(purl)));
    }

    @GetMapping("/risk-level/{riskLevel}")
    @PreAuthorize("hasAnyRole('USER', 'ADMIN')")
    public ResponseEntity<List<VulnerabilityResponse>> getVulnerabilitiesByRiskLevel(@PathVariable String riskLevel) {
        log.info("Retrieving vulnerabilities with risk level: {}", riskLevel);
        return ResponseEntity.ok(vulnerabilityService.getVulnerabilitiesByRiskLevel(riskLevel));
    }

    @GetMapping("/cisa-kev")
    @PreAuthorize("hasAnyRole('USER', 'ADMIN')")
    public ResponseEntity<List<VulnerabilityResponse>> getCisaKevVulnerabilities() {
        log.info("Retrieving vulnerabilities in CISA KEV");
        return ResponseEntity.ok(vulnerabilityService.getVulnerabilitiesByRiskLevel("CRITICAL"));
    }

    @GetMapping("/epss/high")
    @PreAuthorize("hasAnyRole('USER', 'ADMIN')")
    public ResponseEntity<List<VulnerabilityResponse>> getHighEpssVulnerabilities() {
        log.info("Retrieving vulnerabilities with high EPSS scores");
        return ResponseEntity.ok(vulnerabilityService.getVulnerabilitiesByRiskLevel("HIGH"));
    }

    @GetMapping("/new/all")
    @PreAuthorize("hasAnyRole('USER', 'ADMIN')")
    public ResponseEntity<List<VulnerabilityResponse>> getAllVulnerabilitiesNew() {
        log.info("Retrieving all vulnerabilities (new endpoint)");
        return ResponseEntity.ok(vulnerabilityService.getAllVulnerabilitiesResponse());
    }

    @GetMapping("/new/component/{purl}")
    @PreAuthorize("hasAnyRole('USER', 'ADMIN')")
    public ResponseEntity<List<ComponentReportDto>> getVulnerabilitiesByComponentPurlNew(@PathVariable String purl) {
        log.info("Retrieving vulnerabilities for component with PURL: {} (new endpoint)", purl);
        return ResponseEntity.ok(vulnerabilityService.getVulnerabilityByComponentPurl(List.of(purl)));
    }

    @GetMapping("/new/risk-level/{riskLevel}")
    @PreAuthorize("hasAnyRole('USER', 'ADMIN')")
    public ResponseEntity<List<VulnerabilityResponse>> getVulnerabilitiesByRiskLevelNew(@PathVariable String riskLevel) {
        log.info("Retrieving vulnerabilities with risk level: {} (new endpoint)", riskLevel);
        return ResponseEntity.ok(vulnerabilityService.getVulnerabilitiesByRiskLevel(riskLevel));
    }

    @GetMapping("/new/cisa-kev")
    @PreAuthorize("hasAnyRole('USER', 'ADMIN')")
    public ResponseEntity<List<VulnerabilityResponse>> getCisaKevVulnerabilitiesNew() {
        log.info("Retrieving vulnerabilities in CISA KEV (new endpoint)");
        return ResponseEntity.ok(vulnerabilityService.getVulnerabilitiesByRiskLevel("CRITICAL"));
    }

    @GetMapping("/new/epss/high")
    @PreAuthorize("hasAnyRole('USER', 'ADMIN')")
    public ResponseEntity<List<VulnerabilityResponse>> getHighEpssVulnerabilitiesNew() {
        log.info("Retrieving vulnerabilities with high EPSS scores (new endpoint)");
        return ResponseEntity.ok(vulnerabilityService.getVulnerabilitiesByRiskLevel("HIGH"));
    }

    @PostMapping("/compare")
    @PreAuthorize("hasAnyRole('USER', 'ADMIN')")
    public ResponseEntity<List<VulnerabilityResponse>> compareVulnerabilities(@RequestBody List<String> cveIds) {
        log.info("Comparing vulnerabilities for CVEs: {}", cveIds);
        return ResponseEntity.ok(vulnerabilityService.compareVulnerabilities(cveIds));
    }

    @GetMapping("/component/{componentPurl}/risk-level/{riskLevel}")
    @PreAuthorize("hasAnyRole('USER', 'ADMIN')")
    public ResponseEntity<List<VulnerabilityResponse>> getVulnerabilitiesByComponentAndRiskLevel(
            @PathVariable String componentPurl,
            @PathVariable RiskLevel riskLevel) {
        log.info("Getting vulnerabilities with risk level {} for component: {}", riskLevel, componentPurl);
        return ResponseEntity.ok(vulnerabilityService.getVulnerabilitiesByComponentAndRiskLevel(componentPurl, riskLevel));
    }

    @GetMapping("/project/{projectId}/risk-level/{riskLevel}")
    @PreAuthorize("hasAnyRole('USER', 'ADMIN')")
    public ResponseEntity<List<VulnerabilityResponse>> getVulnerabilitiesByProjectAndRiskLevel(
            @PathVariable Long projectId,
            @PathVariable RiskLevel riskLevel) {
        log.info("Getting vulnerabilities with risk level {} for project: {}", riskLevel, projectId);
        return ResponseEntity.ok(vulnerabilityService.getVulnerabilitiesByProjectAndRiskLevel(projectId, riskLevel));
    }

    @PostMapping("/scan/sbom/{sbomId}")
    @PreAuthorize("hasAnyRole('ADMIN')")
    public ResponseEntity<?> triggerSbomVulnerabilityScan(@PathVariable Long sbomId) {
        log.info("Triggering vulnerability scan for SBOM {} (async)", sbomId);
        String scanId = vulnerabilityScanService.startScanForSbom(sbomId);
        return ResponseEntity.ok(java.util.Map.of("scanId", scanId));
    }

    @GetMapping("/project/{projectId}/summary")
    @PreAuthorize("hasAnyRole('USER', 'ADMIN')")
    public ResponseEntity<?> getVulnerabilitySummary(@PathVariable Long projectId) {
        log.info("Getting vulnerability summary for project: {}", projectId);
        Map<RiskLevel, Integer> summary = vulnerabilityService.getVulnerabilitySummaryByProject(projectId);
        return ResponseEntity.ok(summary);
    }

    @GetMapping("/risk-level/not-none")
    @PreAuthorize("hasAnyRole('USER', 'ADMIN')")
    public ResponseEntity<List<VulnerabilityResponse>> getVulnerabilitiesWithRiskLevelNotNone() {
        log.info("Retrieving vulnerabilities with risk level != NONE");
        return ResponseEntity.ok(vulnerabilityService.getVulnerabilitiesWithRiskLevelNotNone());
    }
} 