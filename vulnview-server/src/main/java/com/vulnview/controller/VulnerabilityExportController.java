package com.vulnview.controller;

import com.vulnview.service.VulnerabilityExportService;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.core.io.ByteArrayResource;
import org.springframework.http.HttpHeaders;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;
import org.springframework.security.access.prepost.PreAuthorize;

@RestController
@RequestMapping("/api/v1/vulnerabilities")
public class VulnerabilityExportController {

    @Autowired
    private VulnerabilityExportService vulnerabilityExportService;

    @GetMapping("/export/{repositoryId}")
    @PreAuthorize("isAuthenticated()")
    public ResponseEntity<ByteArrayResource> exportVulnerabilitiesToExcel(@PathVariable Long repositoryId) {
        byte[] excelFile = vulnerabilityExportService.generateExcelReport(repositoryId);
        
        ByteArrayResource resource = new ByteArrayResource(excelFile);
        
        return ResponseEntity.ok()
                .header(HttpHeaders.CONTENT_DISPOSITION, "attachment; filename=vulnerabilities.xlsx")
                .contentType(MediaType.parseMediaType("application/vnd.openxmlformats-officedocument.spreadsheetml.sheet"))
                .contentLength(excelFile.length)
                .body(resource);
    }

    @GetMapping("/compare/{repositoryId}")
    @PreAuthorize("isAuthenticated()")
    public ResponseEntity<?> compareVulnerabilities(
            @PathVariable Long repositoryId,
            @RequestParam(required = false) String baselineVersion,
            @RequestParam(required = false) String currentVersion) {
        return ResponseEntity.ok(vulnerabilityExportService.compareVulnerabilities(repositoryId, baselineVersion, currentVersion));
    }

    @GetMapping("/history/{repositoryId}")
    @PreAuthorize("isAuthenticated()")
    public ResponseEntity<?> getVulnerabilityHistory(@PathVariable Long repositoryId) {
        return ResponseEntity.ok(vulnerabilityExportService.getVulnerabilityHistory(repositoryId));
    }
} 