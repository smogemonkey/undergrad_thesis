'use client';

import { useState } from 'react';
import { Button } from '@/components/ui/button';
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';
import { Progress } from '@/components/ui/progress';
import { Alert, AlertDescription } from '@/components/ui/alert';
import { useToast } from '@/components/ui/use-toast';

interface ScanProgress {
  scanId: string;
  status: string;
  totalComponents: number;
  scannedComponents: number;
  message?: string;
}

export function VulnerabilityScan() {
  const [scanning, setScanning] = useState(false);
  const [progress, setProgress] = useState<ScanProgress | null>(null);
  const { toast } = useToast();

  const startScan = async () => {
    try {
      setScanning(true);
      const response = await fetch('/api/v1/vulnerabilities/scan', {
        method: 'POST',
        headers: {
          'Authorization': `Bearer ${localStorage.getItem('token')}`,
        },
      });
      const data = await response.json();
      
      if (data.scanId) {
        toast({
          title: 'Scan Started',
          description: 'Vulnerability scan has been initiated.',
        });
        pollScanStatus(data.scanId);
      }
    } catch (error) {
      toast({
        title: 'Error',
        description: 'Failed to start vulnerability scan.',
        variant: 'destructive',
      });
      setScanning(false);
    }
  };

  const pollScanStatus = async (scanId: string) => {
    try {
      const response = await fetch(`/api/v1/vulnerabilities/scan/status/${scanId}`, {
        headers: {
          'Authorization': `Bearer ${localStorage.getItem('token')}`,
        },
      });
      const data = await response.json();
      
      if (data.status === 'COMPLETED') {
        setScanning(false);
        setProgress(null);
        toast({
          title: 'Scan Completed',
          description: 'Vulnerability scan has been completed.',
        });
      } else if (data.status === 'FAILED') {
        setScanning(false);
        setProgress(null);
        toast({
          title: 'Scan Failed',
          description: data.message || 'Vulnerability scan failed.',
          variant: 'destructive',
        });
      } else {
        setProgress(data);
        setTimeout(() => pollScanStatus(scanId), 2000);
      }
    } catch (error) {
      setScanning(false);
      setProgress(null);
      toast({
        title: 'Error',
        description: 'Failed to get scan status.',
        variant: 'destructive',
      });
    }
  };

  return (
    <Card>
      <CardHeader>
        <CardTitle>Vulnerability Scan</CardTitle>
      </CardHeader>
      <CardContent>
        <div className="space-y-4">
          <Button 
            onClick={startScan} 
            disabled={scanning}
          >
            {scanning ? 'Scanning...' : 'Start Scan'}
          </Button>

          {progress && (
            <div className="space-y-2">
              <Progress 
                value={(progress.scannedComponents / progress.totalComponents) * 100} 
              />
              <p className="text-sm text-muted-foreground">
                Scanned {progress.scannedComponents} of {progress.totalComponents} components
              </p>
              {progress.message && (
                <Alert>
                  <AlertDescription>{progress.message}</AlertDescription>
                </Alert>
              )}
            </div>
          )}
        </div>
      </CardContent>
    </Card>
  );
} 