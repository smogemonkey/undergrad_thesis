"use client"

import React, { useState, useEffect } from 'react';
import {
  LineChart,
  Line,
  XAxis,
  YAxis,
  CartesianGrid,
  Tooltip,
  Legend,
  ResponsiveContainer,
  BarChart,
  Bar,
} from 'recharts';
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "@/components/ui/select";
import { Button } from "@/components/ui/button";
import { toast } from "sonner";

interface VulnerabilityTrend {
  date: string;
  critical: number;
  high: number;
  medium: number;
  low: number;
}

interface SeverityDistribution {
  severity: string;
  count: number;
}

interface VulnerabilityTrendsProps {
  projectId: number;
}

export function VulnerabilityTrends({ projectId }: VulnerabilityTrendsProps) {
  const [trends, setTrends] = useState<VulnerabilityTrend[]>([]);
  const [severityDistribution, setSeverityDistribution] = useState<SeverityDistribution[]>([]);
  const [timeRange, setTimeRange] = useState('30');
  const [isLoading, setIsLoading] = useState(false);

  useEffect(() => {
    fetchTrends();
    fetchSeverityDistribution();
  }, [projectId, timeRange]);

  const fetchTrends = async () => {
    setIsLoading(true);
    try {
      const token = localStorage.getItem('token');
      const response = await fetch(`/api/projects/${projectId}/vulnerability-trends?days=${timeRange}`, {
        headers: {
          ...(token && { 'Authorization': `Bearer ${token}` })
        }
      });
      const data = await response.json();
      setTrends(data);
    } catch (error) {
      toast.error('Failed to fetch vulnerability trends');
    } finally {
      setIsLoading(false);
    }
  };

  const fetchSeverityDistribution = async () => {
    try {
      const token = localStorage.getItem('token');
      const response = await fetch(`/api/projects/${projectId}/vulnerability-distribution`, {
        headers: {
          ...(token && { 'Authorization': `Bearer ${token}` })
        }
      });
      const data = await response.json();
      setSeverityDistribution(data);
    } catch (error) {
      toast.error('Failed to fetch severity distribution');
    }
  };

  const calculateTrendPercentage = () => {
    if (trends.length < 2) return 0;
    const first = trends[trends.length - 1];
    const last = trends[0];
    const firstTotal = first.critical + first.high + first.medium + first.low;
    const lastTotal = last.critical + last.high + last.medium + last.low;
    if (firstTotal === 0) return lastTotal > 0 ? 100 : 0;
    return ((lastTotal - firstTotal) / firstTotal) * 100;
  };

  const COLORS = {
    critical: '#ef4444',
    high: '#f97316',
    medium: '#eab308',
    low: '#22c55e',
  };

  return (
    <div className="space-y-6">
      <div className="flex justify-between items-center">
        <h2 className="text-2xl font-bold">Vulnerability Trends</h2>
        <div className="flex items-center space-x-4">
          <Select value={timeRange} onValueChange={setTimeRange}>
            <SelectTrigger className="w-[180px]">
              <SelectValue placeholder="Select time range" />
            </SelectTrigger>
            <SelectContent>
              <SelectItem value="7">Last 7 days</SelectItem>
              <SelectItem value="30">Last 30 days</SelectItem>
              <SelectItem value="90">Last 90 days</SelectItem>
            </SelectContent>
          </Select>
          <Button onClick={fetchTrends} disabled={isLoading}>
            {isLoading ? 'Loading...' : 'Refresh'}
          </Button>
        </div>
      </div>

      <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
        <Card>
          <CardHeader>
            <CardTitle>Vulnerability Trend Over Time</CardTitle>
          </CardHeader>
          <CardContent>
            <div className="h-[400px]">
              <ResponsiveContainer width="100%" height="100%">
                <LineChart data={trends}>
                  <CartesianGrid strokeDasharray="3 3" />
                  <XAxis dataKey="date" />
                  <YAxis />
                  <Tooltip />
                  <Legend />
                  <Line type="monotone" dataKey="critical" stroke={COLORS.critical} name="Critical" />
                  <Line type="monotone" dataKey="high" stroke={COLORS.high} name="High" />
                  <Line type="monotone" dataKey="medium" stroke={COLORS.medium} name="Medium" />
                  <Line type="monotone" dataKey="low" stroke={COLORS.low} name="Low" />
                </LineChart>
              </ResponsiveContainer>
            </div>
          </CardContent>
        </Card>

        <Card>
          <CardHeader>
            <CardTitle>Severity Distribution</CardTitle>
          </CardHeader>
          <CardContent>
            <div className="h-[400px]">
              <ResponsiveContainer width="100%" height="100%">
                <BarChart data={severityDistribution}>
                  <CartesianGrid strokeDasharray="3 3" />
                  <XAxis dataKey="severity" />
                  <YAxis />
                  <Tooltip />
                  <Legend />
                  <Bar dataKey="count" fill="#8884d8" />
                </BarChart>
              </ResponsiveContainer>
            </div>
          </CardContent>
        </Card>
      </div>

      <Card>
        <CardHeader>
          <CardTitle>Trend Summary</CardTitle>
        </CardHeader>
        <CardContent>
          <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
            <div className="p-4 bg-gray-50 rounded-lg">
              <h3 className="text-lg font-semibold">Total Vulnerabilities</h3>
              <p className="text-2xl font-bold">
                {trends.length > 0
                  ? trends[0].critical + trends[0].high + trends[0].medium + trends[0].low
                  : 0}
              </p>
            </div>
            <div className="p-4 bg-gray-50 rounded-lg">
              <h3 className="text-lg font-semibold">Trend Change</h3>
              <p className="text-2xl font-bold" style={{ color: calculateTrendPercentage() > 0 ? COLORS.critical : COLORS.low }}>
                {calculateTrendPercentage().toFixed(1)}%
              </p>
            </div>
            <div className="p-4 bg-gray-50 rounded-lg">
              <h3 className="text-lg font-semibold">Critical Vulnerabilities</h3>
              <p className="text-2xl font-bold" style={{ color: COLORS.critical }}>
                {trends.length > 0 ? trends[0].critical : 0}
              </p>
            </div>
          </div>
        </CardContent>
      </Card>
    </div>
  );
} 